

------------------------------------------------------------------------

1. How to Add a New Index?

Indexes are used to improve query performance.

Using Data Annotations

    [Index(nameof(Name))]
    public class Student
    {
        public int StudentId { get; set; }
        public string Name { get; set; } = null!;
    }

Using Fluent API

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Student>()
            .HasIndex(s => s.Name)
            .HasDatabaseName("IX_Student_Name")
            .IsUnique();
    }

------------------------------------------------------------------------

2. How to Add a New Sequence?

Sequences generate sequential numbers in the database.

Example

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasSequence<int>("OrderNumbers", schema: "shared")
            .StartsAt(1000)
            .IncrementsBy(5);

        modelBuilder.Entity<Order>()
            .Property(o => o.OrderNo)
            .HasDefaultValueSql("NEXT VALUE FOR shared.OrderNumbers");
    }

------------------------------------------------------------------------

3. How to Deal with Inheritance?

EF Core supports three inheritance mapping strategies:

1. Table per Hierarchy (TPH)

All classes stored in one table with a discriminator column.

    public abstract class Person
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
    }

    public class Student : Person
    {
        public string School { get; set; } = null!;
    }

    public class Teacher : Person
    {
        public string Subject { get; set; } = null!;
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Person>()
            .HasDiscriminator<string>("PersonType")
            .HasValue<Student>("Student")
            .HasValue<Teacher>("Teacher");
    }

2. Table per Type (TPT)

Each class has its own table.

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Student>().ToTable("Students");
        modelBuilder.Entity<Teacher>().ToTable("Teachers");
    }

3. Table per Concrete Type (TPC)

Each derived class has its own table, parent has no table.

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Student>().UseTpcMappingStrategy();
        modelBuilder.Entity<Teacher>().UseTpcMappingStrategy();
    }

------------------------------------------------------------------------

✅ Summary

-   Index → For faster search & uniqueness.
-   Sequence → To auto-generate sequential numbers.
-   Inheritance → Choose the mapping strategy (TPH / TPT / TPC)
    depending on your needs.
